{"version":3,"sources":["logo.svg","header/header.js","Page/profile.js","Page/blog.js","content/moduel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","headerClick","e","console","log","this","setState","classNamePush","state","aa","className","exact","to","onClick","React","Component","proFile","match","params","name","defaultProps","PropTypes","string","blog","moduel","path","render","component","Profile","App","Boolean","window","location","hostname","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8KC8D5BC,G,wDAxDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAmBVC,YAAc,SAASC,GACnBC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAACC,cAAgBL,IAE/BC,QAAQC,IAAIC,KAAKG,MAAMD,gBArBvB,EAAKC,MAAQ,CACTC,GAAK,EACLF,cAAgB,MALN,E,qDA2BT,IAAD,OACJ,OACI,6BACI,wBAAIG,UAAU,aACV,wBAAIA,UAAuC,QAA5BL,KAAKG,MAAMD,cAA0B,KAAO,IAKvD,kBAAC,IAAD,CAAMI,OAAK,EAACC,GAAG,SAASC,QAAS,SAACX,GAAO,EAAKD,YAAa,UAA3D,SAEJ,wBAAIS,UAAuC,SAA5BL,KAAKG,MAAMD,cAA2B,KAAO,IAIxD,kBAAC,IAAD,CAAMI,OAAK,EAACC,GAAG,cAAcC,QAAS,SAACX,GAAO,EAAKD,YAAa,WAAhE,uBAEJ,wBAAIS,UAAuC,QAA5BL,KAAKG,MAAMD,cAA0B,KAAO,IACvD,kBAAC,IAAD,CAAMK,GAAG,QAAQC,QAAS,SAACX,GAAO,EAAKD,YAAa,UAApD,sBAEJ,wBAAIS,UAAuC,SAA5BL,KAAKG,MAAMD,cAA2B,KAAO,IACxD,kBAAC,IAAD,CAAMK,GAAG,gBAAgBC,QAAS,SAACX,GAAO,EAAKD,YAAa,WAA5D,e,GAlDHa,IAAMC,Y,wBCDNC,E,kDAEjB,WAAYhB,GAAO,IAAD,6BACd,cAAMA,GAENG,QAAQC,IAAIJ,EAAMiB,MAAMC,OAAOC,MAC/B,EAAKX,MAAQ,GAJC,E,qDAWd,OACI,yBAAKE,UAAU,gBACX,6BACI,iIAGJ,6BACI,4BACI,wDACA,4BACI,qLAGKL,KAAKL,MAAMiB,MAAMC,OAAOC,OAGjC,qEACA,4BACI,0EACA,6BACI,8DACA,sEAGR,4BACI,0EACA,6BACI,8DACA,sEAGR,4BACI,0EACA,6BACI,8DACA,sEAGR,4BACI,0EACA,6BACI,8DACA,sEAGR,4BACI,0EACA,6BACI,8DACA,sEAGR,4BACI,0EACA,6BACI,8DACA,uEAIZ,4BACI,4CACA,2DAEI,+D,GA7ESL,IAAMC,WAwF3CC,EAAQI,aAAe,CACnBD,KAAME,IAAUC,Q,IC1DLC,E,kDA5BX,WAAYvB,GAAO,uCACTA,G,qDAGN,OACI,6BACI,6BACI,4BACI,4BAAKK,KAAKL,MAAMmB,MAChB,qCACA,uCACA,wCACA,uCACA,uCACA,8C,GAhBLJ,aC0BJS,E,kDAzBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IAEDQ,MAAQ,GAHC,E,qDAQd,OACI,6BAMI,kBAAC,IAAD,CAAOiB,KAAK,SAASC,OAAQ,kBACzB,8CAEJ,kBAAC,IAAD,CAAOD,KAAK,eAAeE,UAAWC,IACtC,kBAAC,IAAD,CAAOH,KAAK,QAAQE,UAAY,kBAAM,kBAAC,EAAD,CAAMR,KAAK,iB,GArB5CL,IAAMC,WCmBZc,MATf,WACE,OACE,kBAAC,IAAD,CAAOnB,UAAU,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2D,MCXNiB,IAASR,OAAO,kBAAC,IAAD,CAAQS,SAAUC,SAAwB,kBAAE,EAAF,OAAmBC,SAASC,eAAe,SD4H/F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.78917229.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Router, Link} from 'react-router-dom';\r\nimport '../css/common.css';\r\n\r\nclass Header extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            aa : 1,\r\n            classNamePush : null,\r\n            // firebaseConfig = {\r\n            //     apiKey: \"AIzaSyAzdEI_b6zQ1DcmMsXj1qglZgtt3jEWlKk\",\r\n            //     authDomain: \"todolist-f3d53.firebaseapp.com\",\r\n            //     databaseURL: \"https://todolist-f3d53.firebaseio.com\",\r\n            //     projectId: \"todolist-f3d53\",\r\n            //     storageBucket: \"todolist-f3d53.appspot.com\",\r\n            //     messagingSenderId: \"963413121103\",\r\n            //     appId: \"1:963413121103:web:54c9fe1ed174adb119f23a\",\r\n            //     measurementId: \"G-00L2B594G4\"\r\n            //   },\r\n        \r\n        }\r\n    }\r\n\r\n    headerClick = function(e) {\r\n        console.log(e);\r\n        this.setState({classNamePush : e});\r\n\r\n        console.log(this.state.classNamePush);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ul className=\"header-ui\">\r\n                    <li className={this.state.classNamePush == 'zzzz' ? 'on' : ''}>\r\n                        {/** \r\n                         * exact를 사용하면 /일떄만 나오고 나머지는 안나온다. \r\n                         * 비슷한 url에 정확하게를 원한다면 exact를 사용한다.\r\n                         */}\r\n                        <Link exact to=\"/zzzz1\" onClick={(e) => {this.headerClick ('zzzz')}}>zzzz</Link>\r\n                    </li>\r\n                    <li className={this.state.classNamePush == 'about' ? 'on' : ''}>\r\n                        {/**\r\n                         * Link는 URL를 넣을 때 사용한다.\r\n                         */}\r\n                        <Link exact to=\"/about/aaaa\" onClick={(e) => {this.headerClick ('about')}}>이력서</Link>\r\n                    </li>\r\n                    <li className={this.state.classNamePush == 'blog' ? 'on' : ''}>\r\n                        <Link to=\"/blog\" onClick={(e) => {this.headerClick ('blog')}}>Blog 정보</Link>\r\n                    </li>\r\n                    <li className={this.state.classNamePush == 'zzzz4' ? 'on' : ''}>\r\n                        <Link to=\"/zzzz4?:namea\" onClick={(e) => {this.headerClick ('zzzz4')}}>zzzz</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class proFile extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        console.log(props.match.params.name);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"profile-info\">\r\n                <div>\r\n                    <span>항상 노력하는 지원자 신진섭입니다.</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <dl>\r\n                        <dt>자기소개</dt>\r\n                        <dd>\r\n                            <p>\r\n                                안녕하세요. 신진섭입니다\r\n                                지금은 이력서 테스트 중입니다.\r\n                                {this.props.match.params.name}\r\n                            </p>\r\n                        </dd>\r\n                        <dt>프로젝트 경험</dt>\r\n                        <dd>\r\n                            <span>6. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                        <dd>\r\n                            <span>5. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                        <dd>\r\n                            <span>4. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                        <dd>\r\n                            <span>3. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                        <dd>\r\n                            <span>2. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                        <dd>\r\n                            <span>1. 프로젝트 경험</span>\r\n                            <div>\r\n                                <p>사용한 기술</p>\r\n                                <p>프로젝트 내용</p>\r\n                            </div>\r\n                        </dd>\r\n                    </dl>\r\n                    <dl>\r\n                        <dt>발표</dt>\r\n                        <dd>\r\n                            1. 발표 제목\r\n                            <span> 발표 ppt url</span>\r\n                        </dd>\r\n                    </dl>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// props의 타입을 지정해준다\r\n// 부모로 부터 받은 값을 이야기한다\r\nproFile.defaultProps = {\r\n    name: PropTypes.string,\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass blog extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <dl>\r\n                        <dd>{this.props.name}</dd>\r\n                        <dd>React</dd>\r\n                        <dd>Express</dd>\r\n                        <dd>FireBase</dd>\r\n                        <dd>MariaDB</dd>\r\n                        <dd>AWS RDS</dd>\r\n                        <dd>Git Hub</dd>\r\n                    </dl>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nblog.propTypes = {\r\n    name:PropTypes.string = 'kk'\r\n};\r\n\r\n\r\nexport default blog;\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Profile, Blog } from './index';\r\nclass moduel extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                {/**\r\n                 * 해당 url에 대한 컴포넌트를 지정할 때 사용을 한다.\r\n                 * render function () { return <>} 이렇게 쓰는 방법\r\n                 * component = {component }를 사용하는 방법이다\r\n                 */}\r\n                <Route path=\"/zzzz1\" render={() => (\r\n                    <h3>Render Test</h3>\r\n                )}></Route>\r\n                <Route path=\"/about/:name\" component={Profile}></Route>\r\n                <Route path=\"/blog\" component={ () => <Blog name=\"name\"></Blog>}></Route>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default moduel;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {\r\n  BrowserRouter as Route,\r\n  Router,\r\n  Link\r\n} from 'react-router-dom';\r\n\r\nimport Header from './header/header';\r\n\r\nimport Moduel from './content/moduel';\r\nfunction App() {\r\n  return (\r\n    <Route className=\"container\">\r\n      <Header></Header>\r\n      <Moduel></Moduel>\r\n    </Route>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}