{"version":3,"sources":["logo.svg","header/header.js","content/moduel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","aa","exact","to","React","Component","moduel","path","render","App","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,2JCoD5BC,E,kDA/CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,GAAK,GAJK,E,qDAmBd,OACI,6BACI,4BACI,4BAKI,kBAAC,IAAD,CAAMC,OAAK,EAACC,GAAG,UAAf,SAEJ,4BAII,kBAAC,IAAD,CAAMA,GAAG,UAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,iBAAT,e,GAzCHC,IAAMC,W,OC0BZC,E,kDAxBX,WAAYP,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,GAHC,E,qDASd,OACI,6BAMI,kBAAC,IAAD,CAAOO,KAAK,SAASC,OAAQ,kBACzB,mD,GAnBCJ,IAAMC,WCmBZI,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OAAO,kBAAC,IAAD,CAAQQ,SAAUC,SAAwB,kBAAE,EAAF,OAAmBC,SAASC,eAAe,SD4H/F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ba63e66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Router, Link} from 'react-router-dom';\n\nclass Header extends React.Component{\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            aa : 1,\n            // firebaseConfig = {\n            //     apiKey: \"AIzaSyAzdEI_b6zQ1DcmMsXj1qglZgtt3jEWlKk\",\n            //     authDomain: \"todolist-f3d53.firebaseapp.com\",\n            //     databaseURL: \"https://todolist-f3d53.firebaseio.com\",\n            //     projectId: \"todolist-f3d53\",\n            //     storageBucket: \"todolist-f3d53.appspot.com\",\n            //     messagingSenderId: \"963413121103\",\n            //     appId: \"1:963413121103:web:54c9fe1ed174adb119f23a\",\n            //     measurementId: \"G-00L2B594G4\"\n            //   },\n        \n        }\n    }\n    render(){\n        return(\n            <div>\n                <ul>\n                    <li>\n                        {/** \n                         * exact를 사용하면 /일떄만 나오고 나머지는 안나온다. \n                         * 비슷한 url에 정확하게를 원한다면 exact를 사용한다.\n                         */}\n                        <Link exact to=\"/zzzz1\">zzzz</Link>\n                    </li>\n                    <li>\n                        {/**\n                         * Link는 URL를 넣을 때 사용한다.\n                         */}\n                        <Link to=\"/zzzz2\">zzzz</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/zzzz3\">zzzz</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/zzzz4?:namea\">zzzz</Link>\n                    </li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nclass moduel extends React.Component {\n\n    constructor(props){\n        super(props);\n        \n        this.state = {\n\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                {/**\n                 * 해당 url에 대한 컴포넌트를 지정할 때 사용을 한다.\n                 * render function () { return <>} 이렇게 쓰는 방법\n                 * component = {component }를 사용하는 방법이다\n                 */}\n                <Route path=\"/zzzz1\" render={() => (\n                    <h3>Render Test</h3>\n                )}></Route>\n            </div>\n        )\n    }\n}\n\nexport default moduel;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {\n  BrowserRouter as Route,\n  Router,\n  Link\n} from 'react-router-dom';\n\nimport Header from './header/header';\n\nimport Moduel from './content/moduel';\nfunction App() {\n  return (\n    <Route>\n      <Header></Header>\n      <Moduel></Moduel>\n    </Route>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}