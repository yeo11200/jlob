{"version":3,"sources":["logo.svg","new.contents/_includes/header.js","new.contents/moduel/board/profileComponent/person.js","common.js","fun.js","new.contents/moduel/board/profile.js","new.contents/moduel/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","classname","link","color","alignItmes","flexDirection","console","log","AppBar","position","Tabs","aria-label","to","style","Tab","label","React","Component","person","props","Card","CardActionArea","CardMedia","component","alt","height","width","image","title","CardContent","Typography","gutterBottom","variant","href","API_SERVER","window","location","host","indexOf","dateYmdFilter","date","split","callTest","name","arguments","splitComma","items","html","i","Profile","getProfileData","a","totalCareer","axios","get","Common","then","response","data","resposnseCode","status","setState","itemsList","carrer","push","idx","mc_idx","start","mc_startdate","end","mc_enddate","Fun","createData","calories","fat","carbs","protein","goToView","state","this","textAlign","careerFirstDate","careerFirstDateEnd","Date","careerFirstDateStart","careerSecDateEnd","careerSecDateStart","firstMonth","getTime","day","secondMonth","allCareer","Math","ceil","yearCareer","floor","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","value","index","key","mc_compony","onClick","scope","mc_position","dangerouslySetInnerHTML","__html","mc_project_name","Index","path","render","App","className","basename","process","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab39d06d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppBar, Tabs, Tab,  Toolbar, Typography, Button, IconButton} from '@material-ui/core';\r\nimport {  } from '@material-ui/icons'\r\nclass Header extends React.Component{\r\n\r\n    render(){\r\n        var classname = {\r\n            link : {\r\n                color : 'red',\r\n                alignItmes : 'center',\r\n                flexDirection : 'column'\r\n            }\r\n        }\r\n\r\n        console.log(classname);\r\n        return(\r\n            <AppBar position=\"static\">\r\n                {/* value={value} onChange={handleChange} */}\r\n                <Tabs aria-label=\"simple tabs example\">\r\n                    <Link to=\"/test\" style={classname.link}><Tab label=\"이력서\"></Tab></Link>\r\n                    <Link to=\"/test2\" style={classname.link}><Tab label=\"블로그 기술스펙\"></Tab></Link>\r\n                    <Link to=\"/test3\" style={classname.link}><Tab label=\"채팅\"></Tab></Link>\r\n                </Tabs>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Card, CardActionArea, CardActions, CardContent, CardMedia, Typography } from '@material-ui/core';\r\n\r\n\r\nclass person extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                 {/* 개인 정보를 적는 컴포넌트 */}\r\n                 <Card>\r\n                    <CardActionArea>\r\n                        <CardMedia\r\n                        component=\"img\"\r\n                        alt=\"Contemplative Reptile\"\r\n                        height=\"50\"\r\n                        width=\"100\"\r\n                        image=\"/react/public/LOGO.png\"\r\n                        title=\"Contemplative Reptile\"\r\n                        />\r\n                        <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            신진섭\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\r\n                            across all continents except Antarctica\r\n                        </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </Card>\r\n\r\n                <div>\r\n                        <span>Blog : </span><a href=\"https://blog.naver.com/sksksms2\">https://blog.naver.com/sksksms2</a>\r\n                    </div>\r\n                    <div>\r\n                        <span>GitHub : </span><a href=\"https://github.com/yeo11200\">https://github.com/yeo11200</a>\r\n                    </div>\r\n                    <div>\r\n                        <span>Contact : </span><a href=\"mailto:yeo11200@hanmail.net\">yeo11200@hanmail.net</a>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default person;","export var API_SERVER = window.location.host.indexOf('localhost') >= 0 ? '//localhost:5000' : 'https://jinseop-todo-list.herokuapp.com';\r\n\r\n// export var API_SERVER = 'https://jinseop-todo-list.herokuapp.com';\r\n\r\n","// export를 해서 내보내줘야한다\r\n// 받을땐 import\r\nexport function a(){\r\n    let careerFirstDate = ['2019-01-01', '2019-05-31'];\r\n    let careerSecDate = ['2019-07-17'];\r\n    \r\n    let careerFirstDateEnd = new Date(careerFirstDate[1]);\r\n    let careerFirstDateStart = new Date(careerFirstDate[0]);\r\n\r\n    let careerSecDateEnd = new Date();\r\n    let careerSecDateStart = new Date(careerSecDate[0]);\r\n    // mssecond를 하루로 만드는 공식\r\n    let day = 24 * 60 * 60 * 1000;\r\n    // mssecond를 한달로 만드는 공식\r\n    let month = day * 30;\r\n\r\n    let firstMonth = (careerFirstDateEnd.getTime() - careerFirstDateStart.getTime()) / month;\r\n    let secondMonth = (careerSecDateEnd.getTime() - careerSecDateStart.getTime()) / month;\r\n\r\n\r\n    let allCareer = Math.ceil(firstMonth + secondMonth);\r\n    let data = null;\r\n\r\n    if(allCareer > 13){\r\n\r\n        var yearCareer = Math.floor((allCareer / 12));\r\n        data = Math.floor(allCareer / 12) +'년' + (allCareer % (12 * yearCareer)) +'개월';\r\n    }else{\r\n        data = allCareer + '개월';\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport function dateYmdFilter(date){\r\n\r\n    let dateYmd = null;\r\n    let dateA = null;\r\n\r\n    if(date == null){\r\n\r\n        dateYmd = 'Now';\r\n    }else{\r\n        dateA = date.split('T');\r\n\r\n        dateYmd = dateA[0];\r\n    }\r\n\r\n    return dateYmd;\r\n}\r\n\r\nexport function callTest(name){\r\n\r\n    console.log(arguments);\r\n}\r\n\r\nexport function splitComma(items){\r\n\r\n    var splitComma = items.split(',');\r\n\r\n    console.log(splitComma);\r\n\r\n    var html = '';\r\n    for(var i in splitComma){\r\n        console.log(splitComma[i]);\r\n\r\n        html += '<li>'+splitComma[i]+'</li>';\r\n    }\r\n    return html;\r\n}","import React from \"react\";\r\nimport axios from 'axios';\r\nimport Person from './profileComponent/person';\r\n\r\nimport ReactLoading from 'react-loading';\r\nimport { TableContainer, Table, TableHead, TableRow, TableCell, Paper, TableBody } from '@material-ui/core';\r\nimport { FirstPage, LastPage, KeyboardArrowRight, KeyboardArrowLeft} from '@material-ui/icons';\r\n\r\nimport * as Common from '../../../common';\r\nimport * as Fun from '../../../fun';\r\n\r\nclass Profile extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemsList : [],\r\n            resposnseCode : null,\r\n        }        \r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(1);\r\n        this.getProfileData();\r\n    }\r\n\r\n    getProfileData = async () => {\r\n        \r\n        var  totalCareer = [];\r\n\r\n        await axios.get(Common.API_SERVER+'/profile').then( response => {\r\n            \r\n            var items = response.data;\r\n\r\n            var resposnseCode = items.status;\r\n            this.setState({resposnseCode : items.status});\r\n\r\n            console.log(resposnseCode);\r\n            if(resposnseCode === 200){\r\n\r\n                var itemsList = items.data.carrer;\r\n\r\n                for(var i in itemsList){\r\n                    console.log(itemsList[i]);\r\n\r\n                    totalCareer.push({ idx : itemsList[i].mc_idx , start : itemsList[i].mc_startdate, end : itemsList[i].mc_enddate});\r\n                }\r\n                this.setState({itemsList : itemsList});\r\n\r\n\r\n                Fun.callTest(totalCareer);\r\n                \r\n            }else{\r\n                this.setState({itemsList : []});\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n      createData = function(name, calories, fat, carbs, protein) {\r\n        return { name, calories, fat, carbs, protein };\r\n      }\r\n\r\n      goToView = function(items){\r\n        console.log(items);\r\n      }\r\n    render(){\r\n\r\n        let { itemsList, resposnseCode } = this.state;\r\n        return(\r\n            <div>\r\n                <h2>이력서</h2>\r\n                <Person></Person>\r\n\r\n                {/* 자기 소개서나 프로젝트 별로 작업 할 곳 */}\r\n\r\n                <div>\r\n                    <h2>경력사항</h2> <div style={{textAlign: 'right'}}>총경력 : {Fun.a()}</div>\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>회사명 </TableCell>\r\n                                    <TableCell align=\"right\">직군</TableCell>\r\n                                    <TableCell align=\"right\">프로젝트</TableCell>\r\n                                    <TableCell align=\"right\">입사 일</TableCell>\r\n                                    <TableCell align=\"right\">종료 일</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                            {itemsList.map((value, index) => (\r\n                                <TableRow key={value.mc_compony} onClick={ () => this.goToView(value.mc_compony)}>\r\n                                    <TableCell component=\"th\" scope=\"rows\">\r\n                                        {value.mc_compony}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{value.mc_position}</TableCell>\r\n                                    <TableCell align=\"right\"><div dangerouslySetInnerHTML={{__html : Fun.splitComma(value.mc_project_name)}}></div></TableCell>\r\n                                    {/* <TableCell align=\"right\">{value.mc_project_name}</TableCell> */}\r\n                                    <TableCell align=\"right\">{Fun.dateYmdFilter(value.mc_startdate)}</TableCell>\r\n                                    <TableCell align=\"right\">{Fun.dateYmdFilter(value.mc_enddate)}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile;","/**\r\n * Route의 component의 데이터를 export만 시키기 위한 js\r\n */\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Profile } from '../route/router';\r\n\r\nclass Index extends React.Component{\r\n    render(){\r\n        console.log('Index');\r\n        return(\r\n            <div>\r\n                {/**\r\n                 * 해당 url에 대한 컴포넌트를 지정할 때 사용을 한다.\r\n                 * render function () { return <>} 이렇게 쓰는 방법\r\n                 * component = {component }를 사용하는 방법이다\r\n                 */}\r\n                <Route path=\"/test\" render={() => (\r\n                    <h3>Render Test</h3>\r\n                )}></Route>\r\n                <Route path=\"/test2\" component={ Profile }></Route>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {\r\n  BrowserRouter as Route,\r\n  Router,\r\n  Link \r\n} from 'react-router-dom';\r\n\r\nimport Header from './new.contents/_includes/header';\r\n\r\nimport Index from './new.contents/moduel/index';\r\nfunction App() {\r\n  return (\r\n    // basename={process.env.PUBLIC_URL} : 기본적인 경로는 유지 됨\r\n    <Route className=\"container\" basename={process.env.PUBLIC_URL} >\r\n      <Header></Header>\r\n      <Index></Index>\r\n    </Route>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}